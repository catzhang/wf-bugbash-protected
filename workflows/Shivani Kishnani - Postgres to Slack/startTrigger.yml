id: startTrigger
type: datasource
subtype: JavascriptQuery
resourceName: JavascriptQuery
template:
  ordered:
    - queryRefreshTime: ''
    - allowedGroupIds: []
    - streamResponse: false
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - servedFromCache: false
    - offlineUserQueryInputs: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - workflowParams: null
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - showFailureToaster: true
    - query: 'return '
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - workflowRunBodyType: raw
    - privateParams:
        array: []
    - queryRunOnSelectorUpdate: false
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        object: {}
    - _additionalScope: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - requestSentTimestamp: null
    - metadata: null
    - queryRunTime: null
    - changesetObject: ''
    - offlineOptimisticResponse: null
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - finished: null
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams:
        array: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - evalType: script
    - importedQueryDefaults:
        object: {}
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - overrideOrgCacheForUserCache: false
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events:
        array: []
    - queryTimeout: '10000'
    - workflowId: null
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups:
        array: []
    - offlineQueryType: None
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2024-10-31T18:14:38.181Z
blockData:
  top: 0
  left: 48
  uuid: 9ef7cb19-8cda-422f-97c3-43482792c07b
  comment:
    body: Schedule the cron job to run every hour
    visible: true
    pluginId: startTrigger-comment
  pluginId: startTrigger
  blockType: webhook
  editorType: JavascriptQuery
  resourceName: JavascriptQuery
  incomingOnSuccessEdges: []
